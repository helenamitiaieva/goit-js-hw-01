//todo method fetch(url, options) 

//? Fetch API — це вбудований у браузер інтерфейс, доступний через об'єкт window. Він дозволяє відправляти HTTP-запити на сервер і обробляти відповіді.

//! url — шлях до ресурсу на сервері (обов’язковий параметр).

//! options — об’єкт із додатковими налаштуваннями запиту (наприклад, метод, заголовки, тіло тощо).

//* fetch("https://jsonplaceholder.typicode.com/users")
//*   .then(response => {
//*     // Response handling
//*   })
//*   .then(data => {
//*     // Data handling
//*   })
//*   .catch(error => {
//*     // Error handling
//*   });

//? Як працює цей код?
//! fetch() відправляє запит на сервер і повертає проміс.

//! then(response => {...}) виконується, коли відповідь отримано.

//! then(data => {...}) обробляє отримані дані.

//! catch(error => {...}) виконується у разі помилки.

// 1XX — мають інформаційне призначення
// 2XX — коди успішного проведення операції
// 3XX — описують усе, що пов'язано з перенаправленням (redirect)
// 4XX — вказують на помилки з боку клієнта
// 5XX — вказують на помилки з боку сервера

//! Метод fetch() повертає проміс, значенням якого є об'єкт Response. 

// Залежно від типу контенту використовуються різні методи для перетворення даних у зручний формат:

//! json() — парсить відповідь у форматі JSON.
//! text() — парсить відповідь у вигляді тексту (наприклад табличні дані, .csv).
//! blob() — використовується для обробки файлів (зображення, аудіо, відео).

// fetch("https://jsonplaceholder.typicode.com/users")
//   .then(response => {
//     if (!response.ok) {
//       throw new Error(`HTTP error! Status: ${response.status}`);
//     }
//     return response.json();
//   })
//   .then(data => {
//     // Data handling
// 		console.log("Отримані дані:", data);
//   })
//   .catch(error => {
//     // Error handling
// 		console.log("Помилка запиту:", error);
//   });

//? Чому це важливо?

//? fetch() не відхиляє проміс при помилках сервера (наприклад, 404 або 500).

// Щоб виявити невдалий запит, потрібно вручну перевіряти response.ok.

//? Якщо response.ok === false, необхідно викликати throw new Error(), щоб помилка оброблялася в catch().

//! У REST API використовується кілька основних HTTP-методів для взаємодії з ресурсами:
//! POST — створює новий ресурс.
//! GET — отримує набір ресурсів або один ресурс.
//! PUT — оновлює існуючий ресурс або створює новий.
//! PATCH — частково оновлює існуючий ресурс.
//! DELETE — видаляє ресурс.

// -----------------------------------------------

//! const options = {
//! 	method: "GET"
//! };

// fetch("https://jsonplaceholder.typicode.com/users", options)
//   .then(response => {
//     if (!response.ok) {
//       throw new Error(response.status);
//     }
//     return response.json();
//   })
//   .then(data => {
//     // Data handling
//   })
//   .catch(error => {
//     // Error handling
//   });

// ------------------------------------------------

//! Accept — визначає тип контенту, який клієнт може прийняти у відповіді.

//! Content-Type — вказує тип контенту, щоб отримувач знав, як його обробити.

//* Accept: text/html
//* Content-Type: application/json

//? Як передати заголовки у fetch()?

//! Заголовки додаються у властивість headers об’єкта налаштувань:

//! fetch("some-url", {
//! 	headers: {
//! 	  "Content-Type": "application/json",
//! 	  "X-Custom-Header": "custom value",
// 	}
// })

//? Якщо потрібно вказати, що ми очікуємо відповідь у форматі JSON, додаємо Accept: application/json:

// fetch("https://jsonplaceholder.typicode.com/users", {
//!   headers: {
//!     Accept: "application/json",
//!   },
//! }).then(response => {
//   // ...
// });

// ---------------------------------------------

//! User-Agent — ідентифікує браузер або інший клієнтський застосунок.

//! Accept — вказує, які формати даних клієнт може обробляти.

//! Content-Type — вказує тип контенту в тілі запиту або відповіді.

//! Authorization — використовується для передачі токенів аутентифікації.

//! Cache-Control — керує кешуванням відповіді.

//! Host — містить доменне ім’я сервера, до якого виконується запит.

// GET /users
// Host: my-api.com
// Origin: https://my-site.com

//! # Доступ тільки для одного сайту
//! Access-Control-Allow-Origin: https://my-site.com

//! # Доступ для всіх (публічний API)
//! Access-Control-Allow-Origin: *

//? CORS налаштовується на бекенді. Якщо сервер не підтримує кросдоменні запити, фронтенд-розробник не може змінити це у своєму коді. Якщо при виконанні запиту виникає помилка CORS, необхідно перевірити налаштування бекенду та дозволи на доступ.